#!/usr/bin/python

import json
import os
import csv
import sys
import zipfile
import requests
import StringIO


def get_json(url):
	file = [i for i in url.split('/')]
	file = file[7]
	print('Getting file {}'.format(file)),
	r = requests.get(url, stream=True)
	if r.ok:
		#Unzip the file if the download was successful
		z = zipfile.ZipFile(StringIO.StringIO(r.content))
		z.extractall()
		print(' [OK]')
	else:
		print(' [ERROR]')


def f5_cve_parser(file,version,severity,dict_list,device_platform):

	with open(file,'r') as file:
		file = file.read()
		json_file = json.loads(file)
		for data in json_file['CVE_Items']:
			for k,v in data.items():
				try:
					cve_dict = {}
					if data['cve']['affects']['vendor']['vendor_data'][0]['vendor_name'] == 'f5':
						for i in data['cve']['affects']['vendor']['vendor_data'][0]['product']['product_data']:
							if i['product_name'] == device_platform:
								if data['impact']['baseMetricV2']['severity'] in severity:
									sev = data['impact']['baseMetricV2']['severity']
									cve = data['cve']['CVE_data_meta']['ID']
									cve_dict[cve] = {}
									cve_dict[cve]['CVE ID'] = cve
									cve_dict[cve]['version'] = []
									cve_dict[cve]['severity'] = sev

								for i in data['cve']['affects']['vendor']['vendor_data'][0]['product']['product_data'][0]['version']['version_data']:
									if i['version_value'] in version:
										cve_dict[cve]['version'].append(i['version_value'])
								
								
								if cve_dict[cve]['version']:
									description = data['cve']['description']['description_data'][0]['value']
									cve_dict[cve]['description'] = description
									cve_dict[cve]['notes'] = ''	
												
									for i in data['cve']['references']['reference_data']:
										vendor_link = i['url']
									cve_dict[cve]['link'] = vendor_link
								
									if not cve_dict[cve] in dict_list:
										dict_list.append(cve_dict[cve])
								
	
						else:
							continue
					else:
						continue
				except:
					continue


def cve_parser(file,version,severity,dict_list,device_platform):

	with open(file,'r') as file:
		file = file.read()
		json_file = json.loads(file)
		for data in json_file['CVE_Items']:
			for k,v in data.items():
				try:
					cve_dict = {}
					if data['cve']['affects']['vendor']['vendor_data'][0]['product']['product_data'][0]['product_name'] == device_platform:
						if data['impact']['baseMetricV2']['severity'] in severity:
							sev = data['impact']['baseMetricV2']['severity']
							cve = data['cve']['CVE_data_meta']['ID']
							cve_dict[cve] = {}
							cve_dict[cve]['CVE ID'] = cve
							cve_dict[cve]['version'] = []
							cve_dict[cve]['severity'] = sev

							for i in data['cve']['affects']['vendor']['vendor_data'][0]['product']['product_data'][0]['version']['version_data']:
								if i['version_value'] in version:
									cve_dict[cve]['version'].append(i['version_value'])
	
	
							if cve_dict[cve]['version']:
								description = data['cve']['description']['description_data'][0]['value']
								cve_dict[cve]['description'] = description
								cve_dict[cve]['notes'] = ''	
			
								for i in data['cve']['references']['reference_data']:
									vendor_link = i['url']
								cve_dict[cve]['link'] = vendor_link
		
								if not cve_dict[cve] in dict_list:
									dict_list.append(cve_dict[cve])

	
						else:
							continue
					else:
						continue
				except:
					continue


def file_writer(dict_list):

	order = ['CVE ID','severity','description','notes','link','version']
	with open('{}_cve.csv'.format(sys.argv[1]), 'w') as output_file:
	    dict_writer = csv.DictWriter(output_file, order)
	    dict_writer.writeheader()
	    for cve in dict_list:
    		dict_writer.writerow({k:' '.join(v) if isinstance(v, list) else v for k,v in cve.items()})

def main():

	# The CVE feed has the versions in formats such as 9.6.4.8 and 9.6(4)8, you may want to put both when in doubt
	asa_version = ['9.6(4)8','9.6(4)17','9.6.4', '9.6.4.8'] 

	nxos_version = ['6.2(10)','7.0(3)i5(2)']
	paloalto_version = ['8.0.7','9.0.0']
	f5_version = ['13.1.1']
	severity = ['MEDIUM','HIGH','CRITICAL']
	
	dict_list = []
	
	if len(sys.argv) < 2:
		sys.exit('Please specify the device type (asa, nxos, f5, paloalto) or -i to initialize')

	if sys.argv[1] == '-i':
		cve_recent = 'https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-recent.json.zip'
		cve_2019 = 'https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2019.json.zip'
		json_recent = get_json(cve_recent)
		json_2019 = get_json(cve_2019)
		sys.exit()	


	elif sys.argv[1] == 'asa':
		version = asa_version
		device_platform = 'adaptive_security_appliance_software'
	elif sys.argv[1] == 'nxos':
		version = nxos_version
		device_platform = 'nx-os'
	elif sys.argv[1] == 'f5':
		version = f5_version
		device_platform = 'big-ip_local_traffic_manager'
	elif sys.argv[1] == 'paloalto':
		version = paloalto_version
		device_platform = 'pan-os'

	else:
		sys.exit('Please specify the device type (asa, nxos, f5, paloalto) or -i to initialize')


	location = os.getcwd()
	for file in os.listdir(location):
		if file.endswith(".json"):
			print('Parsing CVE list {}'.format(file)),
			if sys.argv[1] == 'f5':
				f5_cve_parser(file,version,severity,dict_list,device_platform)
				print(' [OK]')
			else:
				cve_parser(file,version,severity,dict_list,device_platform)
				print(' [OK]')
	print('Number of CVEs found: {}'.format(len(dict_list)))
	#Wries file to csv, can be opened with Excel, Numbers, etc
	file_writer(dict_list)


	

if __name__ == '__main__':
	main()